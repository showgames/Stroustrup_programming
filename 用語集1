1. //
コメント。// から後ろの内容はコンパイラに無視される。
コードで直接表現することができないプログラマの意図を説明するために書かれる。
後でコードを見返した時に内容を思い出すため。

2. <<
出力演算子。<< の右に書かれたものを左の出力ストリームに送る働きをする。
(ストリームとはデータの流れる経路を意味する。)

3. C++
プログラミング言語の名称。プログラミング言語とは、特定の文法で正確に定義された言語であり、
コンピュータに実行させたい動作を詳細に勝つ明確に定義する用語のこと。
C++は幅広いプログラミングタスクのために設計されたプログラミング言語である。

4. コメント
コードで直接表現することができないプログラマの意図を説明するために書く。
後でコードを見返した時に内容を思い出すためにも書く。

5. コンパイラ
ソースコードをオブジェクトコードに変換するプログラム。

6. コンパイルエラー
コンパイル時に検出されるエラー。スペルミスや定義ミスなど。

7. cout
character output stream(文字出力ストリーム)の略。標準出力ストリームを表す。
標準出力とはほとんどはモニタの場合が多い。

8. 実行可能プログラム
コンピュータが直接解釈できる形式のコード。

9. 関数
複数の命令をひとまとめにして名前をつけたもの。
その関数の中に書かれた個々の命令が、書かれた順番に実行されるためのもの。

10. ヘッダー
#includeを使ってインクルードされるファイル。
ヘッダーにはプログラムで使用するcoutなどの用語の定義が含まれている。

11. IDE
Integrated Development Environment(統合開発環境)の略。
プログラムソースコードのコメント、キーワード、その他の部分を区別しやすくする
コードの色分け表示といった便利な機能に加えて、コードのデバッグ、コンパイル、実行を手助けする
その他の機能を搭載したエディタが含まれている。

12. #include
#includeディレクティブ。C++でプログラムを書くときにいつでも利用可能な機能(C++標準ライブラリ)を使いやすく
するために、ヘッダーファイルの機能を利用可能にするようコンピュータに命令している。

13. ライブラリ
インクルードファイルに含まれている宣言を使ってアクセルする(通常は他の誰かによって書かれた)コードである。

14. リンカ
得られたオブジェクトコードファイルをリンクして、実行可能プログラムを生成するプログラム。

15. main()
C++プログラムの実行を開始する場所を示す。コンピュータは、C++プログラムの中からmainという名前の関数を検索し、
そのmain関数の中に記述された命令から実行を開始する。

16. オブジェクトコード
コンピュータが直接解釈できる形式のコード。

17. 出力
入力を受けた機械・機構が仕事（結果）として外部へ
だすエネルギーや信号・情報。アウトプット。

18. プログラム
コンピュータに何かをさせるには、何をするかを正確に（極端なほど詳細に）伝える必要がある。
そうした何かをするの説明をプログラムを呼ぶ。

19. ソースコード
人が読み書きできる形式のものコードをソースコードという。

20. 文
C++プログラムでは、アクションを指定し、かつ#includeディレクティブではない部分を文またはステートメントと呼ぶ。

21. 宣言
コードを使用できる方法を指定するプログラム文。

22. 代入
変数に新しい値を割り当てる

23. cin
character input の略。
標準ライブラリで定義されている標準入力ストリームを指す。

24. 連結
文字列型(string型)の値に適用することができる演算子。
+で表すことができる。

25. 変換
必要に応じてcharをintにしたり、intをdoubleにすること。
型セーフの概念に注意する。

26. 宣言
オブジェクトに名前をつける文。

27. デクリメント
変数から1を引くこと。
C++では--で記述する。

28. 定義
オブジェクトのためにメモリを確保する宣言。

29. インクリメント
変数に1を足すこと。
C++では++で記述する。

30. 初期化
変数に最初の値を割り当てる

31. 名前
プログラムの別の部分から参照できるもの。
変数に名前を付ければ、それらを記憶しておき、プログラムの
別の部分から参照できるようになる。

32. 縮小
小さすぎて値を割り当てられないかもしれないオブジェクトに
値を挿入すること。
例えば、int型の値をchar型の値に割り当てようとすること。

33. オブジェクト
配置できる情報の種類を指定する型を持つメモリ領域
(特定の型の値を保持するメモリ)

34. 演算
数学で、ある集合の要素間に一定の法則を適用して、
他の要素を作り出す操作。
(演算は一般的には入力と同種のものを出力するというニュアンスを持つ。)
例えば、3と4の足し算なら7というように2つの実数の対と
1つの実数にある法則で結び付けをしているということ。

35. 演算子
各種の演算を表す記号のこと。

36. 型
オブジェクトに対して有効な値と演算を定義する。

37. 型安全
正しく型付けされている→不正な動作をしない。
すべてのオブジェクトには、それを定義するときに型が
割り当てられる。プログラムの型の安全性が保証される、
つまり型セーフとなるのは、オブジェクトがそれらの型の
ルールに従って使用される場合に限られる。

38. 値
型に従って解釈されるメモリ内の一連のビットである。

39. 変数
名前付きのオブジェクト

