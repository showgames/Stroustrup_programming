40. 抽象化
機能を使用するために必要でない詳細(実装の詳細)を便利で
一般的なインターフェイスで覆い隠す

41. begin()
vectorまたは空のvectorを成功する場所への最初の要素を示すランダムアクセス反復子

42. 計算
何らかの入力に基づいて何らかの出力を生成する行為

43. 条件文
条件次第で実行するかしないか、あるいは条件次第で実行する文を
切り替えるために使用される文

44. 分割統治
大きなプログラムを小さなプログラムに分割する
例えば、辞書を作成する必要がある場合は、
その作業をデータの読み取り、並べ替え、出力の
3つに分割することができる.
結果として得られるそれぞれの問題は、元の問題より小さい

45. else
if文で指定された条件が偽となった場合実行されるブロック

46. end()
末尾超え反復子を返す

47. 式
複数のオペランドから値を計算する。
最も単純な式は10, 'a', 3.14といったリテラル値である。
変数の名前も式である。(変数はその名前のオブジェクトを表す)

48. for文
反復処理をするための文
for文はwhile文と似ているが、制御変数が一番上でまとめて
管理されるため、読みやすく理解しやすいという特徴がある
(単純な初期化、条件、インクリメント)

49. 関数
一連の文に名前を付けたもの
関数がは結果(戻り値)を返すことができる

50. if文
プログラムで選択肢の中からどれか一つの処理を実行させるための文

51. 入力
一般にコンピュータに入力される情報
また、プログラムのパーツに渡される情報という意味でもある

52. 反復処理
データ構造の一連の要素に対して何かを行うこと

53. ループ
何らかの文を繰り返す

54. lvalue
代入または初期化の左辺で使用される左辺値
名前付きのオブジェクトを表す(オブジェクトの値ではない)

55. メンバ関数
クラスに関連付けられた関数

56. push_back()
vectorに新しい要素を追加する
新しい要素はvectorの最後の要素になる

57. 繰り返し
一定の処理を複数回実行する

58. rvalue
代入または初期化の右辺で使用される右辺値
名前付きオブジェクトの値、または単に値を表す

59. 選択
複数の選択肢の中からどれか一つの文を実行する

60. switch文
選択文の一種
特に多くの定数と比較する際には、
ネストした(入れ子になった)if文よりもわかりやすい
breakを忘れないよう注意して使う

61. vector
インデックスでアクセスできる要素のシーケンス

62. while文
反復処理を行うための文
for文と違い制御変数(ループ変数)の操作は本体の中で行う
